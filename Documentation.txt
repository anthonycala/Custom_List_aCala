!CustomList<T> Overloaded + Operator!
Concatenates two CustomList objects together.

-Syntax-
public static CustomList<T> operator + (CustomList<T> list1, CustomList<T> list2);
CustomList<T> concatList = customList<T> list1 + customList<T> list2;

-Parameters-
CustomList<T> list1, CustomList<T> list2
First CustomList<T> object and second CustomList<T> object to be added together.

-Return Type-
CustomList<T>
Used to capture the two CustomList<T> objects.

-Example:-
public class Example
{
    public static void Main()
    {
            // Create three new lists
            CustomList<int> testList1 = new CustomList<int>();
            CustomList<int> testList2 = new CustomList<int>();
            CustomList<int> testList3 = new CustomList<int>();

            // add to lists
            testList1.Add(1);
            testList1.Add(2);
            testList1.Add(3);
            testList2.Add(4);
            testList2.Add(5);
            testList2.Add(6);

            // add two lists together and return to concatList
            concatList = testList1 + testList2;

            // print each index of list to a new line
            for(int i = 0; i < concatList.Count; i++)
            {
                Console.WriteLine(concatList[i])
            }

            // OUTPUT
            // 1
            // 2
            // 3
            // 4
            // 5
            // 6
    }
}
--------------------------------------------------------------------------------------------------
!CustomList<T> Overloaded - Operator!
Removes one like instance from two CustomList classes and concatenates the two CustomList objects together.

-Syntax-
public static CustomList<T> operator - (CustomList<T> list1, CustomList<T> list2)
CustomList<T> concatList = customList<T> list1 - customList<T> list2;

-Parameters-
CustomList<T> list1, CustomList<T> list2
First CustomList<T> object and second CustomList<T> subtracted from each other then concatenated..

-Return Type-
CustomList<T>
Used to capture the new CustomList<T> object.

-Example:-
public class Example
{
    public static void Main()
    {
            // Create three new lists
            CustomList<int> testList1 = new CustomList<int>();
            CustomList<int> testList2 = new CustomList<int>();
            CustomList<int> testList3 = new CustomList<int>();

            // add to lists
            testList1.Add(1);
            testList1.Add(2);
            testList1.Add(3);
            testList1.Add(4);
            testList2.Add(1);
            testList2.Add(2);
            testList2.Add(3);
            testList2.Add(6)

            // add two lists together and return to concatList
            testList3 = testList1 - testList2;

            // print each index of list to a new line
            for(int i = 0; i < testlist3.Count; i++)
            {
                Console.WriteLine(concatList[i])
            }

            // OUTPUT
            // 4
            // 6
    }
}
--------------------------------------------------------------------------------------------------